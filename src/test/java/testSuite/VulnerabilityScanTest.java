package testSuite;

import io.qameta.allure.*;
import io.restassured.response.Response;
import org.junit.jupiter.api.*;

import static io.restassured.RestAssured.given;

public class VulnerabilityScanTest {

    String proxy="http://localhost:9090";
    Response response;
    String idScanner;
    @BeforeEach
    public void start(){}



    @Order(2)
    @Test
    @DisplayName("Verificar la generacion de escaneo de OWASP ZAP")
    @Description("Este test inicia el ZAP y genera reporte")
    @Severity(SeverityLevel.CRITICAL)
    @Owner("UCB")
    @Link(name = "WebPage", url = "google.com")
    @Issue("DEF-12345")
    @Feature("Vulnerabilidad Web")
    @Epic("Seguridad")
    @Story("Escaneo con OWASP ZAP")
    public void owaspZap() throws InterruptedException {
        try {
            initScanner();
            waitScannerComplete();
        } catch (Exception e) {
            System.out.println("Error durante la ejecuci√≥n del test: " + e.getMessage());
            Assertions.fail("El test fallo: " + e.getMessage());
        }
    }

    @Step("2) espera que el escaneo se complete en un 100%")
    private void waitScannerComplete() throws InterruptedException {
        // esperar para que el escaneo este al  100%
        if (idScanner == null) {
            throw new IllegalStateException("Scan ID is null. Make sure initScanner() was called successfully.");
        }
        String state= "0";
        do{
            Thread.sleep(5000);
            response = given()
                    .queryParam("scanId",idScanner)
                    .log().all()
                    .when().get(proxy+"/JSON/ascan/view/status/");

            response.then().log().all();
            state = response.then().extract().path("status");
            System.out.println("porcentaje actual : ["+state+"%]");
        } while (!state.equals("100"));
        System.out.println("llego al 100% !!!!!");
    }

    @Step("1) inicio el scaneo en todoist")
    private void initScanner() {
        try {
            System.out.println("Iniciando escaneo en: " + proxy + "/JSON/ascan/action/scan/");
            response = given()
                    .queryParam("url","https://todoist.com/app/")
                    .log().all()
                    .when().get(proxy+"/JSON/ascan/action/scan/");

            System.out.println("Respuesta completa: " + response.asString());
            response.then().log().all();
            idScanner = response.then().extract().path("scan");

            if (idScanner == null) {
                System.out.println("ID del scanner es null. Contenido de la respuesta: " + response.asString());
                throw new RuntimeException("No se pudo obtener el ID del scanner");
            }
        } catch (Exception e) {
            System.out.println("Error al iniciar el scanner: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    @AfterEach
    public void complete(){
        response = given()
                .queryParam("scanId",idScanner)
                .log().all()
                .when().get(proxy+"/HTML/ascan/view/scanProgress/");
        response.then().log().all();
        //pending : adjuntar el reporte html en allure
        attachHTML("Lista Vulnerabilidades Realizadas (Coverage)",response.getBody().asString());

        response = given()
                .log().all()
                .when().get(proxy+"/OTHER/core/other/htmlreport/");
        response.then().log().all();
        attachHTML("Reporte OWASP ZAP",response.getBody().asString());

        // pending : adjuntar el reporte html en allure
    }

    @Attachment(value = "{0}", type = "text/hmtl")
    public String attachHTML(String name, String content){
        return  content;
    }


}